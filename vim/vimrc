set nocompatible              " be improved, required

call plug#begin('~/.vim/plugged')
    " https://github.com/neoclide/coc.nvim
    Plug 'neoclide/coc.nvim', {'branch': 'release'}

    " 主要功能是相同 project 的 code 在不同 editor 下能夠保持一致
    " 會讀取 .editorconfig
    Plug 'editorconfig/editorconfig-vim'

    " https://github.com/preservim/nerdtree
    Plug 'scrooloose/nerdtree'

    " snippet 打縮寫會自動完成 E.g. cl => console.log
    " Plug 'SirVer/ultisnips'

    " contains snippets files and used by SirVer/ultisnips
    " Plug 'honza/vim-snippets'

    " https://github.com/terryma/vim-multiple-cursors
    " multiple selections
    Plug 'terryma/vim-multiple-cursors'

    " show git diff
    Plug 'airblade/vim-gitgutter'

    " https://github.com/christoomey/vim-system-copy
    " enable to copy something in vim to system clipboard
    Plug 'christoomey/vim-system-copy'

    " https://github.com/scrooloose/nerdcommenter
    Plug 'scrooloose/nerdcommenter'

    " https://github.com/liuchengxu/vista.vim
    Plug 'liuchengxu/vista.vim'

    " https://github.com/google/vim-searchindex
    Plug 'google/vim-searchindex'

    " https://github.com/iamcco/markdown-preview.nvim
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

    " https://github.com/tpope/vim-fugitive
    " This blog may help https://advancedweb.hu/dive-into-git-history-with-fugitive-vim/
    Plug 'tpope/vim-fugitive'

    " https://github.com/hashivim/vim-terraform
    " for terraform syntax highlight
    Plug 'hashivim/vim-terraform'

    " https://github.com/osyo-manga/vim-brightest
    Plug 'osyo-manga/vim-brightest'

    " https://github.com/pearofducks/ansible-vim
    Plug 'pearofducks/ansible-vim'

    " https://github.com/jiangmiao/auto-pairs
    Plug 'jiangmiao/auto-pairs'

    " https://github.com/tpope/vim-surround
    " https://www.youtube.com/watch?v=NsHAG4GmZYQ&ab_channel=sarrost
    Plug 'tpope/vim-surround'

" All of your Plugins must be added before the following line
call plug#end()

"-------------------------------------------------------------------------------------------

"" file encoding utf-8
set encoding=utf-8

"" 設定 tab 的字元數
set tabstop=4

"" 設定 tab 為空白
set expandtab

"" show line number
set number

"" 設定縮排寬度
set shiftwidth=4

"" 自動縮排 (優於 auto indent)
set smartindent

" 開啟 vim 的智慧大小寫搜尋
set smartcase
set ignorecase

"" 顯示目前的游標位置
set cursorline

"" 進階查詢, 輸入字符後自動尋找, default 會等輸入完
set incsearch

"" 自動註解
set formatoptions+=r

"" 設定一行長度
set textwidth=120

set hlsearch

set noswapfile

"" inoremap只在 insert 模式下生效
"" vnoremap只在 visual 模式下生效
"" nnoremap只在 normal 模式下生效
"" Press F5 to refresh vimrc
nnoremap <F5> :source $MYVIMRC<CR>
"" Press F6 to change hlsearch
nnoremap <F6> :set hlsearch!<CR>
nnoremap <F7> :set paste!<CR>
inoremap <F7> <ESC>:set paste!<CR>i
nnoremap <F9> :NERDTreeToggle<CR>

" replace mark word without overwriting your last yank
vnoremap p "_dP
nnoremap ln :lnext<CR>
nnoremap lp :lprevious<CR>

" Use CTRL-S for saving
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

"" 把每一行最後的空白在 :w 後自動刪掉
autocmd BufWritePre * :%s/\s\+$//e


"" enable backspace key under insert mode
set backspace=indent,eol,start

"" 顯示右下角設定值
"" set ruler

"" set mouse enable in all mode
"" set mouse=a

"" 語法上色顯示, default on
"" syntax on

"" 命令模式按 Tab 自動補齊
set wildmenu

"" replace using https://github.com/jiangmiao/auto-pairs since 2022/05/19
" inoremap ( ()<Esc>i
" inoremap (<End> (<Esc>i<End>
" inoremap () ()
" inoremap [<CR> [<CR>]<Esc>ko
" inoremap {<CR> {<CR>}<Esc>ko

"" 關掉 scratch 預覽
set completeopt-=preview

" Add full file path to your existing statusline
set statusline+=%F
" let statusline always visible
set laststatus=2
" modified tag
set statusline+=\ %m

" Switching on spell-checking, To move to a misspelled word, use ']s' and '[s'.
" To mark a word as good and add it to your spellfile, move your cursor to the word and enter 'zg'.
" more http://vimdoc.sourceforge.net/htmldoc/spell.html
setlocal spell
" The following command will let us press CTRL-N or CTRL-P in insert-mode to complete the word we’re typing!
set complete+=kspell

highlight clear SpellBad
" remove " before ctermfg will wrong spelling word to red color
highlight SpellBad cterm=underline "ctermfg=203 guifg=#ff5f5f

" check one time after 4s of inactivity in normal mode
set autoread
au CursorHold * checktime

" code folding
set foldmethod=indent
set foldlevel=1
set foldnestmax=3
set foldenable!

set listchars=tab:→·,trail:·,extends:»,precedes:«
set list

" keep undo history even exit file
" set undofile

" ==================== syntastic deprecated since 2021/12/24 ========================
"" run :mes then you can debug
" let g:syntastic_debug = 3

"" Suggest
" set statusline+=%#warningmsg#
" " set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_wq = 0

" let g:syntastic_loc_list_height = 5

" let g:syntastic_mode_map = { 'mode': 'passtive',
"                            \ 'active_filetypes': ['python'],
"                            \ 'passive_filetypes': ['javascript', 'typescript'] }

" ======================= coc.nvim =======================

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

let g:coc_global_extensions = ['coc-json', 'coc-git', 'coc-eslint', 'coc-yaml', 'coc-pyright']

" ======================= coc.nvim end =======================

" ======================= SirVer/ultisnips =======================
" " better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = '<tab>'
" let g:UltiSnipsJumpForwardTrigger = '<tab>'
" let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" " :h UltiSnips-how-snippets-are-loaded
" let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'mySnippets']
" ======================= SirVer/ultisnips end =======================

" ======================= scrooloose/nerdtree =======================
" close vim if the only window left open is a NERDTree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" ======================= scrooloose/nerdtree end =======================

" ======================= terryma/vim-multiple-cursors =======================
" https://github.com/terryma/vim-multiple-cursors
" Custom mapping
let g:multi_cursor_select_all_word_key = '<C-a>'
" Default mapping
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'
" ======================= terryma/vim-multiple-cursors end =======================

" ======================= airblade/vim-gitgutter =======================
" set updatetime for vim-gitgutter
set updatetime=1000
" ======================= airblade/vim-gitgutter end =======================

" ======================= scrooloose/nerdcommenter =======================
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" ======================= scrooloose/nerdcommenter end =======================

" ======================= vista.vim =======================
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

set statusline+=%{NearestMethodOrFunction()}

" By default vista.vim never run if you don't call it explicitly.
"
" If you want to show the nearest function in your statusline automatically,
" you can add the following line to your vimrc
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

let g:vista_sidebar_position = "vertical topleft"

" close vim if the only window left open is a vista
autocmd BufEnter * if winnr("$") == 1 && vista#sidebar#IsOpen() | q | endif

" call Vista automatically when opening files
autocmd VimEnter *.{py,js} Vista
" typescript use coc may not open vista without sleep
autocmd VimEnter *.ts sleep 500m | Vista
let g:vista_stay_on_open = 0

let g:vista_default_executive = 'ctags'

" Set the executive for some filetypes explicitly. Use the explicit executive
" instead of the default one for these filetypes when using `:Vista` without
" specifying the executive.
let g:vista_executive_for = {
  \ 'typescript': 'coc',
  \ }

" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
let g:vista#renderer#enable_icon = 0

" let g:vista_log_file = expand('~/vista.log')
" ======================= vista.vim end =======================

" ======================= 'iamcco/markdown-preview.nvim' =======================
let g:mkdp_refresh_slow = 1
" ======================= 'iamcco/markdown-preview.nvim' end =======================

" mac
if has("macunix")
    nnoremap <ESC>b b
    nnoremap <ESC>f w
endif

" Jenkinsfile VIM syntax highlighting
au BufNewFile,BufRead *Jenkinsfile* setf groovy
" re = 1 will cause groovy error
set re=0

let g:terraform_fmt_on_save=1


" ======================= 'jiangmiao/auto-pairs' =======================
" π -> right option + p
inoremap π <ESC>:call AutoPairsToggle()<CR>i
nnoremap π :call AutoPairsToggle()<CR>
inoremap ø <ESC><Right>:call AutoPairsFastWrap()<CR>i
" let g:AutoPairsFlyMode = 1
" ======================= 'jiangmiao/auto-pairs' =======================

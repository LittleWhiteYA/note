# for git
alias gst='git status'
alias gcm='git commit'
alias gcma='git commit --amend'
alias gct='git checkout'
alias gm='git checkout master'
alias gpl='git pull'
alias gp='git push'
alias gpft='gp --follow-tags'
alias gd='git diff'
alias gbr='git branch'
alias gla='git log --all --decorate --oneline --graph'
alias gaa='git add --all'
alias gau='git add -u'
function gup() { # git pull and update
    if [ $1 ]
    then
        branch=$1;
    else
        branch="master";
    fi

    git checkout ${branch};
    git pull --rebase origin ${branch} && git remote update --prune;
}
alias gsh='git stash'
alias gsp='git stash pop'
alias gclean='git stash && git stash drop'
alias grbm='git rebase master'
alias grbc='git rebase --continue'
alias grb='git rebase'
alias gcpf='gcma --no-edit && gp --force-with-lease'
alias gpf='gp --force-with-lease'

alias av='cd $HOME/Project/PPAV'
alias gj='cd $HOME/Project/goodjob'
alias gg='cd $HOME/Project'
alias cc='cd $HOME/company'
alias yck='yarn upgrade-interactive'
alias v='vim'
alias k8s='kubectl'
alias kube='$HOME/.local/bin/kube-shell'

# Add git branch if its present to PS1
color_prompt=yes
parse_git_branch() {
 git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
if [ "$color_prompt" = yes ]; then
 PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\] $(parse_git_branch) \[\033[00m\]\n\$ '
else
 PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w $(parse_git_branch)\n\$ '
fi

GREP_OPTIONS='-nr --color=auto --exclude-dir=node_modules --exclude-dir=coverage --exclude-dir=.next --exclude-dir=apidoc --exclude-dir=.git --exclude=*.lock'
alias grp='grep $GREP_OPTIONS'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# let vim not to open new file if file does not exist.
vim() {
    local args=("$@")
    local new=0

    # Check for `--new'.
    for ((i = 0; i < ${#args[@]}; ++i)); do
        if [[ ${args[$i]} = --new || ${args[$i]} = -n ]]; then
            new=1
            unset args[$i]   # Don't pass '--new' to vim.
        fi
    done

    if ! (( new )); then
        for file in "${args[@]}"; do
            [[ $file = -* ]] && continue   # Ignore options.

            if ! [[ -e $file ]]; then
                printf '%s: cannot access %s: No such file or directory\n' "$FUNCNAME" "$file" >&2
                return 1
            fi
        done
    fi

    # Use `command' to invoke the vim binary rather than this function.
    command "$FUNCNAME" "${args[@]}"
}

alias vn='vim --new'
alias ntla='ntl --autocomplete'

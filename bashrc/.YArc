# for git
alias gst='git status'
alias gcm='git commit'
alias gcma='git commit --amend'
alias gct='git checkout'
alias gm='git checkout master'
alias gpl='git pull'
alias gp='git push'
alias gpt='gp --follow-tags'
alias gd='git diff'
alias gbr='git branch'
alias gla='git log --all --decorate --oneline --graph --color'
alias gaa='git add --all'
alias gau='git add -u'
function gup() { # git pull and update
    if [ $1 ]
    then
        branch=$1;
    else
        branch="master";
    fi

    git checkout ${branch};
    git pull --rebase origin ${branch} && git remote update --prune;
}
alias gsh='git stash'
alias gsp='git stash pop'
alias gclean='git stash && git stash drop'
alias grbm='git rebase master'
alias grbc='git rebase --continue'
alias grb='git rebase'
alias gcpf='gcma --no-edit && gp --force-with-lease'
alias gpf='gp --force-with-lease'

alias av='cd $HOME/Project/PPAV'
alias gj='cd $HOME/Project/goodjob'
alias gg='cd $HOME/Project'
alias cc='cd $HOME/company'
alias yck='yarn upgrade-interactive --latest'

# Add git branch if its present to PS1
color_prompt=yes
parse_git_branch() {
 git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

if [ "$color_prompt" = yes ]; then
 PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\] $(parse_git_branch) \[\033[00m\]$(kube_ps1)\n\$ '
else
 PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w $(parse_git_branch)$(kube_ps1)\n\$ '
fi

GREP_OPTIONS='-nr --color=auto --exclude-dir=node_modules --exclude-dir=coverage --exclude-dir=.next --exclude-dir=apidoc --exclude-dir=.git --exclude=*.lock'
alias g='grep $GREP_OPTIONS'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias open='nautilus'

# let vim not to open new file if file does not exist.
function vim() {
    local args=("$@")
    local new=0

    if (( $# == 0 )); then
        echo "I need to eat filename to open!"
        return 1
    fi

    # Check for `--new'.
    for ((i = 0; i < ${#args[@]}; ++i)); do
        if [[ ${args[$i]} = --new || ${args[$i]} = -n ]]; then
            new=1
            unset args[$i]   # Don't pass '--new' to vim.
        fi
    done

    if ! (( new )); then
        for file in "${args[@]}"; do
            [[ $file = -* ]] && continue   # Ignore options.

            if ! [[ -e $file ]]; then
                printf '%s: cannot access %s: No such file or directory\n' "$FUNCNAME" "$file" >&2
                return 1
            fi
        done
    fi

    # Use `command' to invoke the vim binary rather than this function.
    command "$FUNCNAME" "${args[@]}"
}

# https://github.com/junegunn/fzf
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
alias v='vim $(fzf)'
alias vv='vim'
alias vn='vim --new'
alias ntla='ntl --autocomplete'
alias watch='watch '

# k8s and helm

source <(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.
source <(helm completion bash)

## https://github.com/jonmosco/kube-ps1
source /home/littlewhiteya/Project/kube-ps1.sh

function helm() {
    if [[ "$1" == "upgrade" ]] && [[ "$@" != *"--help"* ]]
    then
        helm repo update
    fi
    $(which helm) "$@"
}

function hd() {
    if [[ "$1" == "upgrade" ]] && [[ "$@" != *"--help"* ]]
    then
        helm repo update
    fi
    $(which helm) --tiller-namespace default "$@"
}

alias k='kubectl'
complete -o default -o nospace -F __start_kubectl k
alias kube='$HOME/.local/bin/kube-shell'

alias sea='kubectl config use-context yoctol-sea-1'
alias stag='kubectl config use-context yoctol-sea-staging-1'
alias nlu='kubectl config use-context yoctol-sea-nlu-1'

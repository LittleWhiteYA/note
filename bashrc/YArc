# for git
alias gst='git status'
alias gs='git status'
alias gcm='git commit'
alias gcma='git commit --amend'
alias gco='git checkout $(git branch | fzf)'
alias gpl='git pull'
alias gp='git push'
alias gpt='gp --follow-tags'
alias gd='git diff'
alias gdd='git fuzzy status'
alias gbr='git branch'
alias gla='git log --all --decorate --oneline --graph --color'
alias gaa='git add --all'
alias gau='git add -u'
function gup() { # git pull and update
    if [ $1 ]
    then
        branch=$1;
    else
        branch="master";
    fi

    git checkout ${branch};
    git pull --rebase origin ${branch} && git remote update --prune;
}
alias gsh='git stash'
alias gsp='git stash pop'
alias grbm='git rebase master'
alias grbc='git rebase --continue'
alias grb='git rebase'
alias gcpf='gcma --no-edit && gp --force-with-lease'
alias gpf='gp --force-with-lease'

alias av='cd $HOME/Project/ppav'
alias dd='cd $HOME/Project'
alias cc='cd $HOME/yoctol'
alias yck='yarn upgrade-interactive --latest'

alias up='sudo apt update'
alias ugl='apt list --upgradable'
alias ug='sudo apt upgrade'
alias gbd='git branch -D $(git branch | fzf)'

if [ -s "$HOME/Project/note/kube-ps1.sh" ]; then
    # Add git branch if its present to PS1
    ## https://github.com/jonmosco/kube-ps1
    source $HOME/Project/note/kube-ps1.sh
    color_prompt=yes
    parse_git_branch() {
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
    }

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\] $(parse_git_branch) \[\033[00m\]$(kube_ps1)\n\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w $(parse_git_branch)$(kube_ps1)\n\$ '
    fi
fi

GREP_OPTIONS='-nr --color=auto --exclude-dir=node_modules --exclude-dir=coverage --exclude-dir=.next --exclude-dir=apidoc --exclude-dir=.git --exclude=*.lock --exclude-dir=static --exclude-dir=__pycache__ --exclude-dir=tmp* --exclude-dir=lib'
alias g='grep $GREP_OPTIONS'
alias gg='grep'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias open='nohup nautilus . > /dev/null 2>&1 &'

alias vi='vim'
# let vim not to open new file if file does not exist.
function vim() {
    local args=("$@")
    local new=0

    if (( $# == 0 )); then
        echo "I need to eat filename to open!"
        return 1
    fi

    # Check for `--new'.
    for ((i = 0; i < ${#args[@]}; ++i)); do
        if [[ ${args[$i]} = --new || ${args[$i]} = -n ]]; then
            new=1
            unset args[$i]   # Don't pass '--new' to vim.
        fi
    done

    if ! (( new )); then
        for file in "${args[@]}"; do
            [[ $file = -* ]] && continue   # Ignore options.

            if ! [[ -e $file ]]; then
                printf '%s: cannot access %s: No such file or directory\n' "$FUNCNAME" "$file" >&2
                return 1
            fi
        done
    fi

    # https://vim.fandom.com/wiki/Map_Ctrl-S_to_save_current_or_new_files
    local STTYOPTS="$(stty --save)"
    stty stop '' -ixoff

    # Use `command' to invoke the vim binary rather than this function.
    command "$FUNCNAME" "${args[@]}"

    stty "$STTYOPTS"
}

# ignore cd with no argument
# https://stackoverflow.com/questions/22327883/how-to-disable-cd-command-line
function cd() {
    (( $# > 0)) && builtin cd "$@"
}

# https://github.com/junegunn/fzf
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border -q !node_modules\ !lib\ !static\ '
alias v='vim $(fzf)'
alias vv='vim'
alias vn='vim --new'
alias ntla='ntl --autocomplete'
alias watch='watch '

# k8s and helm

# setup autocomplete in bash into the current shell, bash-completion package should be installed first.
if [ -s "$(command -v kubectl)" ]; then
    source <(kubectl completion bash)
fi

if [ -s "$(command -v helm)" ]; then
    source <(helm completion bash)
fi

function h() {
    if [[ "$1" == "upgrade" ]] && [[ "$@" != *"--help"* ]]
    then
        helm repo update
    fi
    $(which helm) "$@"
}
function hgv() {
    cmd="helm get values $(h ls $@ | fzf | awk '{ print $1 }') $@"
    history -s hgv
    history -s $cmd
    # echo $cmd
    eval "$cmd"
}

export EDITOR=vim

alias k='kubectl'
alias kp='kubectl get po'
complete -o default -o nospace -F __start_kubectl k
alias kube='$HOME/.local/bin/kube-shell'
function kd() {
    cmd="k describe po $(kp | fzf | awk '{ print $1 }') $@"
    history -s kd
    history -s $cmd
    echo $cmd
    eval "$cmd"
}
function kdd() {
    cmd="k delete po $(kp | fzf | awk '{ print $1 }') $@"
    history -s kdd
    history -s $cmd
    echo $cmd
    eval "$cmd"

}
function klogs() {
    cmd="k logs $(kp | fzf | awk '{ print $1 }') $@"
    history -s klogs
    history -s $cmd
    echo $cmd
    eval "$cmd"
}
function kexec() {
    cmd="k exec -it $(kp | fzf | awk '{ print $1 }') $@"
    history -s kexec
    history -s $cmd
    echo $cmd
    eval "$cmd"
}
function kpf() {
    local args=("$@")
    local namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')

    # Check for `-n'.
    for ((i = 0; i < ${#args[@]}; ++i)); do
        echo ${args[$i]}
        if [[ ${args[$i]} = -n ]]; then
            namespace=${args[$i+1]}
        fi
    done

    cmd="k port-forward $(kp -n $namespace | fzf | awk '{ print $1 }') $@"
    history -s kpf
    history -s $cmd
    echo $cmd
    eval "$cmd"
}

alias sea='kubectl config use-context yoctol-sea-1'
alias stag='kubectl config use-context yoctol-sea-staging-1'

if [ -s "$HOME/.poetry/env" ]; then
    source $HOME/.poetry/env
fi

export PATH="$HOME/Project/git-fuzzy/bin:$PATH"
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"


# bind 'TAB:menu-complete'


